#GC垃圾回收机制有两种方法
#1.引用计数（为主）:
'''
当引用计数为 0 时然后自动回收垃圾
'''
#2.隔代回收（为辅）
'''
条件1 :当没有外部变量引用时，且两个对象之间有相互引用时，满足条件
条件2 :当有外部变量引用时，
第一代链表  当满足条件1 时进行计数减一，计数为0 时清理掉 ，当满足条件2时，进入第二代链表，不满足条件2的继续进行清理第一代
            直到清理完
第二代链表  重复第一代

第三代链表

'''
'''
1、导致引⽤计数+1的情况:
        对象被创建，例如a=23
        对象被引⽤，例如b=a
        对象被作为参数，传⼊到⼀个函数中，例如func(a)
        对象作为⼀个元素，存储在容器中，例如list1=[a,a]
2、导致引⽤计数-1的情况:
        对象的别名被显式销毁，例如del a
        对象的别名被赋予新的对象，例如a=24
        ⼀个对象离开它的作⽤域，例如f函数执⾏完毕时，func函数中的局部变量（全局变量不会）
        对象所在的容器被销毁，或从容器中删除对象
'''
'''
1.查看对象的引用计数: 调用sys模块中的getrefcount方法

'''

import sys
s = "hello world"
print(sys.getrefcount(s))





# 1. ⼩整数对象池
'''
Python 对⼩整数的定义是 [-5, 257) 这些整数对象是提前建⽴好的，不会被
垃圾回收。在⼀个 Python 的程序中，所有位于这个范围内的整数使⽤的都
是同⼀个对象.
同理，单个字⺟也是这样的。
但是当定义2个相同的字符串时，引⽤计数为0，触发垃圾回收
'''

#2. ⼤整数对象池
#每⼀个⼤整数，均创建⼀个新的对象。

#3. intern机制
'''
a1 ='helloworld'    a2 ='helloworld'    a3 ='helloworld'
纯字母,没有特殊符号的，会触发intern机制，这三个变量为引用的同一地址

a1 ='hello  world'  a2 ='hello  world'  a3 ='hello  world'
中间含有特殊符号的，不会触发intern机制，这三个变量分别引用的三个地址

'''
# 总结
# ⼩整数[-5,257)共⽤对象，常驻内存
# 单个字符共⽤对象，常驻内存
# 单个单词，不可修改，默认开启intern机制，共⽤对象，引⽤计数为0，
# 则销毁





