时间复杂度的几条基本计算规则：
	1。基本操作，即只有常数项，认为其时间复杂度为O(1)
	2。顺序结构，时间复杂度按加法进行计算
	3。循环结构，时间复杂度按乘法进行计算
	4。分支结构，时间复杂度取最大值
	5。判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略
	6。在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度
	
常见时间复杂度：
	执行次数函数举例	阶			非正式术语
	12					O(1)		常数阶
	2n+3				O(n)		线性阶
	3n2+2n+1			O(n2)		平方阶
	5log2n+20			O(logn)		对数阶
	2n+3nlog2n+19		O(nlogn)	nlogn阶
	6n3+2n2+3n+4		O(n3)		立方阶
	2n					O(2n)		指数阶
注意，经常将log2n（以2为底的对数）简写成logn
所消耗的时间从小到大

O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(n3) < O(2n) < O(n!) < O(nn)

list的操作测试	
def test1():
   l = []
   for i in range(1000):
      l = l + [i]
def test2():
   l = []
   for i in range(1000):
      l.append(i)
def test3():
   l = [i for i in range(1000)]
def test4():
   l = list(range(1000))

from timeit import Timer

t1 = Timer("test1()", "from __main__ import test1")
print("concat ",t1.timeit(number=1000), "seconds")
t2 = Timer("test2()", "from __main__ import test2")
print("append ",t2.timeit(number=1000), "seconds")
t3 = Timer("test3()", "from __main__ import test3")
print("comprehension ",t3.timeit(number=1000), "seconds")
t4 = Timer("test4()", "from __main__ import test4")
print("list range ",t4.timeit(number=1000), "seconds")

# ('concat ', 1.7890608310699463, 'seconds')
# ('append ', 0.13796091079711914, 'seconds')
# ('comprehension ', 0.05671119689941406, 'seconds')
# ('list range ', 0.014147043228149414, 'seconds')	

pop操作测试

x = range(2000000)
pop_zero = Timer("x.pop(0)","from __main__ import x")
print("pop_zero ",pop_zero.timeit(number=1000), "seconds")
x = range(2000000)
pop_end = Timer("x.pop()","from __main__ import x")
print("pop_end ",pop_end.timeit(number=1000), "seconds")

# ('pop_zero ', 1.9101738929748535, 'seconds')
# ('pop_end ', 0.00023603439331054688, 'seconds')
测试pop操作：从结果可以看出，pop最后一个元素的效率远远高于pop第一个元素	
	
list内置操作的时间复杂度：
	函数操作			时间复杂度
	index[]					O(1)
	index assignment		O(1)
	append					O(1)
	pop()					O(1)
	pop(i)					O(n)
	insert(i,item)			O(n)
	del operator			O(n)
	iteration				O(n)
	contains(in)			O(n)
	get slice[x:y]			O(k)
	del slice				O(n)
	set slice				O(n+k)
	reverse					O(n)
	concatenate				O(k)
	sort					O(nlogn)
	multiply				O(nk)
	
dict内置操作的时间复杂度：
	函数操作			时间复杂度
	copy				O(n)
	get item			O(1)
	set item			O(1)
	delete item			O(1)
	contains(in)		O(1)
	iteration			O(n)
	
最常用的数据运算有五种：插入、删除、修改、查找、排序	

	
	
	
	
	
	
	
	
	
	
	
	